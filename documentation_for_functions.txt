Документация к коду


---

Класс Book

Класс, представляющий книгу и обеспечивающий управление данными о ней.

Методы:

1. __init__(self, book_id, title, author, year, status)

Описание: Инициализирует объект книги с уникальным ID, названием, автором, годом издания и статусом.

Аргументы:

book_id: Уникальный идентификатор книги.

title: Название книги.

author: Автор книги.

year: Год издания книги.

status: Статус книги (в наличии или выдана).




2. _sanitize_input(input_string)

Описание: Удаляет все спецсимволы и пробелы из строки. Проверяет, что ввод не пустой.

Аргументы:

input_string: Строка, которую необходимо очистить.


Возвращает: Очищенную строку.

Исключения: Вызывает ValueError, если результат пустой.



3. validate_year(year)

Описание: Проверяет корректность года издания (от 868 до 2024 года).

Аргументы:

year: Год издания.


Исключения:

ValueError: Если год меньше 868 или больше 2024.




4. to_text()

Описание: Преобразует объект книги в строку формата ID|Название|Автор|Год|Статус для записи в файл.

Возвращает: Строку данных книги.



5. from_text(text)

Описание: Создает объект книги из строки, прочитанной из файла.

Аргументы:

text: Строка с данными книги, разделенная |.


Возвращает: Объект класса Book.





---

Класс Library

Класс для управления библиотекой книг. Хранит данные в текстовом файле.

Методы:

1. __init__(self, storage_file)

Описание: Инициализирует библиотеку и загружает книги из файла.

Аргументы:

storage_file: Путь к файлу хранения данных.




2. _load_books()

Описание: Считывает данные книг из файла и создает объекты Book.

Возвращает: Список объектов Book.



3. _save_books()

Описание: Сохраняет текущие книги в файл, записывая их строки.



4. add_book(title, author, year)

Описание: Добавляет новую книгу в библиотеку.

Аргументы:

title: Название книги.

author: Автор книги.

year: Год издания книги.


Исключения: Выводит ошибку, если год или данные некорректны.



5. remove_book(book_id)

Описание: Удаляет книгу по ее ID.

Аргументы:

book_id: Уникальный идентификатор книги.


Исключения: Выводит ошибку, если книга с таким ID не найдена.



6. _find_book_by_id(book_id)

Описание: Ищет книгу в библиотеке по ID.

Аргументы:

book_id: Уникальный идентификатор книги.


Возвращает: Найденный объект книги или None.



7. search_books(query)

Описание: Выполняет поиск книг по названию или автору.

Аргументы:

query: Поисковый запрос.


Результат: Выводит список найденных книг.



8. display_books()

Описание: Выводит список всех книг в библиотеке.



9. change_status(book_id, status)

Описание: Изменяет статус книги (в наличии или выдана).

Аргументы:

book_id: Уникальный идентификатор книги.

status: Новый статус книги.


Исключения: Выводит ошибку, если статус или ID некорректны.





---

Класс LibraryApp

Класс для работы с библиотекой через консольное приложение.

Методы:

1. __init__(self, library)

Описание: Инициализирует приложение, связывая его с библиотекой.

Аргументы:

library: Экземпляр класса Library.




2. run()

Описание: Основной цикл приложения. Выводит меню и обрабатывает пользовательский ввод.



3. _display_menu()

Описание: Выводит меню в зависимости от наличия книг в библиотеке.





---

Пример структуры файла library.txt

1|Гарри Поттер|Дж. К. Роулинг|1997|в наличии
2|Война и мир|Лев Толстой|1869|выдана


---

Основные принципы, соблюденные в коде

1. Принцип единственной ответственности (SRP):

Классы Book, Library и LibraryApp четко разделены по функциональности.

Book отвечает за данные книги, Library — за управление книгами, LibraryApp — за взаимодействие с пользователем.



2. Принцип открытости/закрытости (OCP):

Код можно расширять, добавляя новые функции, не изменяя уже написанные классы.



3. Принцип разделения интерфейсов (ISP):

Методы классов минимально зависят друг от друга, делая их независимыми.



4. Повторное использование (DRY):

Логика валидации, загрузки и сохранения данных вынесена в отдельные методы.



5. Простота и читабельность:

Программа реализована с использованием match case, что упрощает выбор действий.


